//App1
class Solution {
    static bool comp(pair<int,int>& p1,pair<int,int>& p2)
    {
        if(p1.first<p2.first)
        {
            return true;
        }
        
        if(p1.first==p2.first)
        {
            return p1.second<p2.second;
        }
        return false;
        
    }
    
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
     
        int n=arr.size();
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++)
        {
            int t=abs(arr[i]-x);
            v.push_back({t,i});
            
        }
        
        sort(v.begin(),v.end(),comp);
        
        vector<int> ans;
        for(int i=0;i<k;i++)
        {
            ans.push_back(arr[v[i].second]);
        }
        sort(ans.begin(),ans.end());
        return ans;
        
    }
};





//App2

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        
        vector<int> ans;
        
        int n=arr.size();
        int l=0;
        int r=n-1;
        int m=0;
        
        while(l<=r)
        {
             m=(l+r)/2;
            
            if(arr[m]==x)
            {
                break;
            }
            
            if(arr[m]<x)
            {
                l=m+1;
            }
            else
            {
                r=m-1;
            }
            
        }
      //  cout<<l<<endl;
        
        r=l;
        l=r-1;
        
        while(l>=0 && r<n && k>0)
        {
            if(abs(arr[l]-x)<=abs(arr[r]-x))
            {
                ans.push_back(arr[l]);
                l--;
                k--;
            }
            else
            {
                 ans.push_back(arr[r]);
                r++;
                k--;
            }
        }
        
        while(k>0 && l>=0)
        {
              ans.push_back(arr[l]);
                l--;
                k--;
            
            
        }
          while(k>0 && r<n)
        {
              ans.push_back(arr[r]);
                r++;
                k--;
            
            
        }
        sort(ans.begin(),ans.end());
        
        return ans;
        
    }
};




