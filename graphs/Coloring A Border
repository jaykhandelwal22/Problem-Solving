class Solution {
    
    
    
public:
    vector<vector<int>> colorBorder(vector<vector<int>>& grid, int row, int col, int color) {
        
        int dx[]={1,-1,0,0};
        int dy[]={0,0,1,-1};
        int m=grid.size();
        int n=grid[0].size();
        
        queue<pair<int,int>> q;
        vector<vector<int>> visited(m,vector<int>(n,0));
        
        q.push({row,col});
        int c=grid[row][col];
        while(!q.empty())
        {
            
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            
            if(visited[x][y]!=0)
            {
                continue;
            }
            visited[x][y]=1;
            int pos=0;
            int col=0;
             for(int i=0;i<4;i++)
            {
                int nx=x+dx[i];
                int ny=y+dy[i];
                
                if(nx>=0 && ny>=0 && nx<m && ny<n )
                {
                   pos++;
                    if(grid[nx][ny]==c)
                    {
                        col++;
                    }
                }
            }
            if(col!=4)
            {
                //grid[x][y]=color;
                visited[x][y]=2;
            }
            
         //   cout<<x<<" "<<y<<endl;
            
            for(int i=0;i<4;i++)
            {
                int nx=x+dx[i];
                int ny=y+dy[i];
                
                if(nx>=0 && ny>=0 && nx<m && ny<n && grid[nx][ny]==c &&visited[nx][ny]==0)
                {
                    q.push({nx,ny});
                    
                }
            }
            
            
            
        }
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(visited[i][j]==2)
                {
                    grid[i][j]=color;
                }
            }
        }
        return grid;
        
    }
};
